<!doctype html>

<html lang="en">

<head>
  <meta charset="utf-8">
  <title>OpenEVSE</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="viewport" content="width=device-width, user-scalable=no" />
  <meta name="description" content="OpenEVSE">
  <meta name="author" content="OpenEVSE">
  <meta name="msapplication-TileColor" content="#ffffff">
  <meta name="theme-color" content="#ffffff">
  <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
  <link rel="shortcut icon" href="favicon.ico">
  <link rel="manifest" href="site.webmanifest">
  <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5">
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
<article data-bind="visible: !initialised()" class="load">
  <div class="message">
      <p>Loading, please wait... (<span data-bind="text: itemsLoaded"></span>/<span data-bind="text: itemsTotal"></span>)</p>
  </div>
</article>

  <div id="container" data-bind="visible: initialised">
    <header>
        <h1>Open<span>EVSE</span></h1>
        <article class="menu">
            <button class="hamb" type="button" menu-button="">
                <span></span>
                <span></span>
                <span></span>
            </button>
            <ul>
                <li>
                  <input id="tab-3" type="radio" name="tab-group" data-bind="checked: tab" value="status" />
                  <label for="tab-3">OpenEVSE</label>
                </li>
                <li>
                  <input id="tab-1" type="radio" name="tab-group" data-bind="checked: tab" value="system" />
                  <label for="tab-1">System</label>
                </li>
                <li>
                  <input id="tab-2" type="radio" name="tab-group" data-bind="checked: tab" value="services" />
                  <label for="tab-2">Services</label>
                </li>
            </ul>
        </article>

    </header>
    <!--TAB 1: OpenEVSE -->
    <section id="content-1" data-bind="visible: isStatus">
        <!-- Session Status -->

        <article class="message error" data-bind="visible: openevse.isError">
          <h4>EVSE Error</h4>
          <p data-bind="text: status.estate">Lorem ipsum</p>
        </article>

          <!-- Session Status -->

        <article data-bind="visible: !openevse.isError(),
                css: { ready: openevse.isReady(),
                connected: openevse.isConnected() &amp;&amp; !openevse.isCharging(),
                charging: openevse.isCharging(),
                sleeping: openevse.isSleeping() }"
                class="ar_status">
            <div class="status">
              <h2>Session Status</h2>
              <h3 data-bind="text: status.estate">Starting</h3>
            </div>
            <ul class="l_data">
              <li>
                <span data-bind="text: scaleString(status.amp(), 1000, 2) + ' A'"></span>
                <span>Current</span>
              </li>
              <li>
                  <span data-bind="text: scaleString(status.wattsec(), 3600000, 2) + ' kWh'"></span>
                  <span>Energy</span>
              </li>
              <li>
                  <span  data-bind="text: scaleString(status.temp1(), 10, 1) + ' &deg;C'"></span>
                  <span>Temp</span>
              </li>
              <li>
                  <span data-bind="text: openevse.time.elapsed"></span>
                  <span>Elapsed</span>
              </li>
            </ul>
        </article>
          <!-- Settings -->
        <article class="ar_setup" data-bind="with: openevse">
          <h2>Setup</h2>
          <div class="message" data-bind="with: time, visible: !time.hasRTC()">
            <p>Time: No RTC detected</p>
          </div>
          <ul data-bind="with: time, visible: time.hasRTC()">
              <li>
                <h4>Time:</h4>
                <input type="date" data-bind="value: date, disable: automaticTime" />
                <input type="time" data-bind="value: time, disable: automaticTime" />
              </li>
              <li class="switch_c">
                    <span data-bind="css: {selected: !automaticTime() }">Manual</span>
                    <div class="switch">
                        <input type="checkbox" name="onoffswitch" id="myonoffswitch"  data-bind="checked: automaticTime">
                        <label for="myonoffswitch"></label>
                    </div>
                    <span data-bind="css: {selected: automaticTime() }">Automatic<span>
              </li>
              <li>
                  <button data-bind="click: setTime">Sync</button>
              </li>
          </ul>
          <ul>
            <li>
              <h4>Service Level:</h4>
                <select data-bind="options: serviceLevels,
                optionsText: 'name',
                optionsValue: 'value',
                value: serviceLevel,
                disable: updatingServiceLevel(),
                css: { saved: savedServiceLevel }"></select>
            </li>
            <li>
              <h4>Max Current:</h4>
              <select data-bind="options: currentLevels,
              optionsText: 'name',
              optionsValue: 'value',
              value: currentCapacity,
              disable: updatingServiceLevel() || updatingCurrentCapacity(),
              css: { saved: savedCurrentCapacity }"></select>
            </li>
          </ul>
        </article>

        <!-- Charge Options/Mode -->
        <article class="ar_charge">
            <h2>Charge</h2>
            <div class="options">
                <h3>Options</h3>
                <ul>
                  <li data-bind="with: openevse, visible: !openevse.isError()">
                      <button data-bind="click: setStatus.bind($data, 'enable'), visible: !isEnabled()">Start</button>
                      <button data-bind="click: setStatus.bind($data, 'sleep'), visible: !isSleeping()">Pause</button>
                  </li>
                  <li data-bind="with: openevse">
                      <h4>Time limit:</h4>
                      <select data-bind="options: timeLimits,
                      optionsText: 'name',
                      optionsValue: 'value',
                      value: timeLimit,
                      enable: !updatingTimeLimit() &amp;&amp; isConnected(),
                      css: { saved: savedTimeLimit }"></select>
                  </li>
                  <li data-bind="with: openevse">
                      <h4>Energy limit:</h4>
                      <select type="text" data-bind="options: chargeLimits,
                      optionsText: 'name',
                      optionsValue: 'value',
                      value: chargeLimit,
                      enable: !updatingChargeLimit() &amp;&amp; isConnected(),
                      css: { saved: savedChargeLimit }" ></select>
                  </li>
                </ul>
                <h4>Timer</h4>
                <ul  data-bind="with: openevse">
                    <li>
                        <p>Start:</p>
                        <input type="time" data-bind="value: delayTimerStart, disable: isError" />
                    </li>
                    <li>
                        <p> Stop:</p>
                        <input type="time" data-bind="value: delayTimerStop, disable: isError" />
                    </li>
                    <li>
                        <button data-bind="text: delayTimerEnabled() ? 'Update' : 'Set',
                        enable: !updatingDelayTimer() &amp;&amp;
                                delayTimerValid() &amp;&amp;
                                !isError(),
                        click: startDelayTimer">Set</button>
                        <button data-bind="visible: delayTimerEnabled(),
                        enable: !updatingDelayTimer() &amp;&amp;
                                !isError(),
                        click: stopDelayTimer">Cancel</button>
                    </l>
                  </ul>
            </div>
            <div class="mode">
              <h3 class="info" data-bind="click: toggle.bind($data, showSolarDivert)">Mode</h3>
                <div class="message"  data-bind="visible: showSolarDivert()">
                  <p>Dynamically adjust charge rate based on solar PV generation or excess power (grid export).</p>
                  <h4>1. Normal (default):</h4>
                  <ul>
                    <li>Charge at maximum current set by EVSE.</li>
                  </ul>
                  <h4>2. Eco (solar PV divert):</h4>
                  <ul>
                      <li>If only solar PV feed available: charge rate is modulated based on <strong>solar PV generation.</strong></li>
                      <li>If grid +I/-E (positive Import / negative Export) feed is available: charge rate will be modulated by available  <strong>excess power.</strong></li>
                      <li>If EVSE is sleeping: charging will begin when solar PV / excess power > min charge rate.</li>
                      <li>Charging will not pause; this avoids excess wear on the EVSE relay and the EV.</li>
                    </ul>
                </div>
                <div class="message error"  data-bind="visible: !isEcoModeAvailable()">
                  <h4>MQTT config not configured with Solar PV / Grid topic.</h4>
                  <p>Solar PV Divert requires the SolarPV-gen or Grid (+I/-E) MQTT topic to be defined on the
                      <a href="#services" data-bind="click: function() { tab('services'); config.mqtt_enabled(true); }">Services</a>
                      tab.</p>
                </div>
                <!-- <ul  data-bind="visible: isEcoModeAvailable">  -->
                <ul ><!-- only view -->
                <li class="switch_c">
                    <span data-bind="css: {selected: !ecoMode() }">Normal (max)</span>
                    <div class="switch">
                        <input type="checkbox" name="ecoswitch" id="myecoswitch" data-bind="checked: ecoMode">
                        <label for="myecoswitch"></label>
                    </div>
                    <span data-bind="css: {selected: ecoMode }">Eco (PV divert)</span>
                </li>
                <li class="m_data">
                  <span>
                      <em data-bind="visible: haveSolar">Solar:</em>
                      <!-- <em data-bind="visible: haveGridIe">Grid Import/Export:</em> -->
                  </span>
                  <span data-bind="text: haveGridIe() ? status.grid_ie() : status.solar()" data-prop="w"></span>
                  <span data-bind="text: formatUpdate(openevse.time.divert_update()), css: updateClass(openevse.time.divert_update())"></span>
                </li>
                <li data-bind="visible: ecoMode" class="m_data">
                  <span>Charge rate:</span>
                  <span data-bind="text: status.charge_rate" data-prop="A"></span>
                </li>
                </ul>

            </div>


        </article>

        <div class="advance">
          <input type="checkbox" name="adv_switch" id="myadv_switch" data-bind="checked: advancedMode">
          <label for="myadv_switch">Advance Mode</label>
        </div>
        <!-- Original -->
        <!-- <div class="box380" data-bind="css: { right: !advancedMode() &amp;&amp; !openevse.allTestsEnabled(),
          left: advancedMode() || openevse.allTestsEnabled() }">
          <h2>Display</h2>
          <div>
          <span data-bind="css: {selected: !advancedMode() }">Simple</span>
          <label class="switch">
          <input type="checkbox" data-bind="checked: advancedMode">
          <div class="slider round"></div>
          </label>
          <span data-bind="css: {selected: advancedMode }">Advanced</span><br/>
          </div>
        </div> -->

          <!-- Energy -->
        <article data-bind="visible: advancedMode">
          <h2>Energy</h2>
          <ul class="l_data">
            <li>
              <span data-bind="text: scaleString(status.wattsec(), 3600000, 2)+ ' kWh'"></span>
              <span>This Session</span>
            </li>
            <li>
                <span data-bind="text: scaleString(status.watthour(), 1000, 2)+ ' kWh'"></span>
                <span>Total</span>
              </li>
          </ul>
        </article>

        <!-- Sensor Values -->
        <article data-bind="visible: advancedMode">
          <h2>Sensor Values</h2>
          <ul class="l_data_s">
            <li>
                <span>Pilot</span>
                <span data-bind="text: status.pilot() + ' A'"></span>
            </li>
            <li>
                <span>Current Now</span>
                <span data-bind="text: scaleString(status.amp(), 1000, 2) + ' A'"></span>
            </li>
            <li>
                <span>Temp1</span>
                <span data-bind="text: scaleString(status.temp1(), 10, 1) + ' &deg;C'"></span>
            </li>
            <li>
                <span>Temp2</span>
                <span data-bind="text: scaleString(status.temp2(), 10, 1) + ' &deg;C'"></span>
            </li>
            <li>
                <span>Temp3</span>
                <span data-bind="text: scaleString(status.temp3(), 10, 1) + ' &deg;C'"></span>
            </li>
          </ul>
        </article>

        <!-- Current -->

        <article data-bind="visible: advancedMode">
            <h2>Current</h2>
            <ul class="l_data_s">
              <li>
                  <span>Service Level</span>
                  <span data-bind="text: openevse.actualServiceLevel"></span>
              </li>
              <li>
                  <span>Level <em data-bind="text: openevse.actualServiceLevel"></em> Minimum:</span>
                  <span data-bind="text: openevse.minCurrentLevel() + ' A'"></span>
              </li>
              <li>
                  <span>Level <em data-bind="text: openevse.actualServiceLevel"></em> Minimum:</span>
                  <span data-bind="text: openevse.maxCurrentLevel() + ' A'"></span>
              </li>
              <li>
                  <span>Sensor Scale</span>
                  <span data-bind="text: config.scale"></span>
              </li>
              <li>
                  <span>Sensor Offset</span>
                  <span data-bind="text: config.offset"></span>
              </li>
            </ul>
        </article>

          <!-- Hardware -->
        <article class="ar_hw" data-bind="visible: advancedMode">
          <h2>Hardware</h2>
          <ul class="l_data_s">
            <li><h3>OpenEVSE</h3></li>
            <li>
                <span>Firmware</span>
                <span data-bind="text: config.firmware"></span>
            </li>
            <li>
                <span>Protocol</span>
                <span data-bind="text: config.protocol"></span>
            </li>
            <li>&nbsp;</li>
            <li data-bind="with: openevse">
                <button data-bind="click: restart, text: (restartFetching() ? 'Restarting...' : 'Restart'), disable: restartFetching">Restart</button>
            </li>
          </ul>
          <ul class="l_data_s">
            <li><h3>OpenEVSE WiFi</h3></li>
            <li>
                <span>Firmware</span>
                <span data-bind="text: config.version"></span>
            </li>
            <li>
                <span>Flash Size</span>
                <span data-bind="text: scaleString(config.espflash(), 1024, 0) + 'K'"></span>
            </li>
            <li>
                <span>Free RAM</span>
                <span data-bind="text: scaleString(status.free_heap(), 1024, 0) + 'K'"></span>
            </li>
            <li data-bind="with: openevse">
                <button data-bind="click: restart, text: (restartFetching() ? 'Restarting...' : 'Restart'), disable: restartFetching">Restart</button>
            </li>
          </ul>
        </article>


        <!-- Safety -->

        <article class="ar_safety" data-bind="visible: advancedMode() || openevse.allTestsEnabled()">
          <div class="t_switch">
              <h2 data-bind="click: toggle.bind($data, showSafety)" class="info">Safety</h2>
              <div class="switch_c">
                  <div class="switch">
                      <input type="checkbox" name="dev_sys_m" id="mydev_sys_m" data-bind="checked: safetyMode">
                      <label for="mydev_sys_m"></label>
                  </div>
                  <span data-bind="css: {selected: safetyMode }">Developer Mode</span>
              </div>
          </div>


          <div class="message" data-bind="visible: showSafety()">
            <p>Hardware safety checks. Enable dev mode (System > Developer Mode) to enable/disable or use the physical LCD + menu button.</p>
          </div>


          <div class="message warning" data-bind="visible: !openevse.allTestsEnabled()">
            <h4>Warning!!</h4>
            <p>Not all the safety tests are enabled, please take extra care before charging your vehicle.</p>
          </div>

          <h3>Test</h3>
          <ul class="l_data_s">
              <li data-bind="css: {error: 9 === status.state() }">
                <span>GFI Self Test</span>
                <span data-bind="visible: safetyMode">
                    <div class="switch">
                        <input type="checkbox" name="gfiSel" id="mygfiSel" data-bind="checked: openevse.gfiSelfTestEnabled">
                        <label for="mygfiSel"></label>
                    </div>
                </span>
                <span data-bind="text: openevse.gfiSelfTestEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
              <li data-bind="css: {error: 7 === status.state() }">
                <span>Ground Monitoring</span>
                <span data-bind="visible: safetyMode">
                    <div class="switch">
                        <input type="checkbox" name="ground" id="myground" data-bind="checked: openevse.groundCheckEnabled">
                        <label for="myground"></label>
                    </div>
                </span>
                <span data-bind="text: openevse.groundCheckEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
              <li data-bind="css: {error: 8 === status.state() }">
                  <span>Stuck Contact Detection</span>
                  <span data-bind="visible: safetyMode">
                      <div class="switch">
                          <input type="checkbox" name="stuck" id="mystuck" data-bind="checked: openevse.stuckRelayEnabled">
                          <label for="mystuck"></label>
                      </div>
                  </span>
                  <span data-bind="text: openevse.stuckRelayEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
              <li data-bind="css: {error: 10 === status.state() }">
                  <span>Temperature Monitoring</span>
                  <span data-bind="visible: safetyMode">
                      <div class="switch">
                          <input type="checkbox" name="temp" id="mytemp" data-bind="checked: openevse.tempCheckEnabled">
                          <label for="mytemp"></label>
                      </div>
                  </span>
                  <span data-bind="text: openevse.tempCheckEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
              <li data-bind="css: {error: 5 === status.state() }">
                  <span>Diode Check</span>
                  <span data-bind="visible: safetyMode">
                      <div class="switch">
                          <input type="checkbox" name="diode" id="mydiode" data-bind="checked: openevse.diodeCheckEnabled">
                          <label for="mydiode"></label>
                      </div>
                  </span>
                  <span data-bind="text: openevse.tempCheckEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
              <li data-bind="css: {error: 4 === status.state() }">
                  <span>Vent Required</span>
                  <span data-bind="visible: safetyMode">
                      <div class="switch" >
                          <input type="checkbox" name="vent" id="myvent" data-bind="checked: openevse.ventRequiredEnabled">
                          <label for="myvent"></label>
                      </div>
                  </span>
                  <span data-bind="text: openevse.ventRequiredEnabled() ? 'Enabled' : 'Disabled',visible: !safetyMode()"></span>
              </li>
          </ul>
          <h3>Error</h3>
          <ul class="l_data_s">
            <li>
              <span>GFCI</span>
              <span data-bind="text: status.gfcicount"></span>
            </li>
            <li>
              <span>No Ground</span>
              <span data-bind="text: status.nogndcount"></span>
            </li>
            <li>
              <span>Stuck Contact</span>
              <span data-bind="text: status.stuckcount"></span>
            </li>
          </ul>
        </article>
    </section>

      <!--TAB 2: System -->
    <section id="content-2" data-bind="visible: isSystem">
        <article class="ar_wf">
          <h2>WiFi Setup</h2>
          <h3>Mode: <span id="mode" data-bind="text: status.fullMode">ddd</span></h3>

          <div id="client-view" data-bind="visible: !wifi.canConfigure() &amp;&amp; !wifi.wifiConnecting()">
            <ul id="sta-ssid" class="l_ssid">
              <li data-bind="click: function () { wifi.forceConfig(true); }">
                <span class="point _50" data-bind="text: config.ssid" class="middle">BTHub3-ZWCW</span>
              </li>
              <li><button data-bind="click: function () { wifi.forceConfig(true); }">Change WiFi network</button></li>
            </ul>
            <ul class="l_data wf">
              <li>
                <span><a data-bind="text: status.ipaddress, attr: {href: 'http://'+status.ipaddress()}" rel="nofollow"></a></span>
                <span>IP Address</span>
              </li>
              <li>
                <span><em data-bind="text: status.packets_success"></em> of <em data-bind="text: status.packets_sent"></em></span>
                <span>Successful packets:</span>
              </li>
              <li>
                <span><em data-bind="text: status.comm_success">999999</em> of <em data-bind="text: status.comm_sent">999999</em></span>
                <span>RAPI packets</span>
              </li>

            </ul>
            <div class="buttonholder">
              <button id="apoff" data-bind="visible: status.isWifiAccessPoint, click: wifi.turnOffAccessPoint, disable: wifi.turnOffAccessPointFetching">Turn off Access Point</button>
            </div>
          </div>
          <!-- <div id="ap-view" data-bind="visible: wifi.canConfigure() &amp;&amp; !wifi.wifiConnecting()"> -->
          <div id="ap-view">
            <h3>Connect to network:</h3>

            <div class="n_steps">
              <ul  class="l_network">
                  <li id="networks" data-bind="foreach: scan.results">
                    <div class="net" data-bind="css: {selected: bssid() }">
                      <input type="checkbox" name='network' id="" data-bind="checkedValue: bssid(), checked: $root.wifi.bssid">
                      <label for="" class="point" data-bind="text: ssid"></label>
                    </div>
                  </li>
                  <!-- list cases -->
                  <li>
                      <div class="net selected">
                        <input type="checkbox" name='network' checked id="net2">
                        <label for="net2" class="point _100">BTHub3-ZWCW</label>
                      </div>
                    </li>
                  <li>
                    <div class="net">
                      <input type="checkbox" name='network' id="net2_b">
                      <label for="net2_b" class="point _100">BTHub3-ZWCW</label>
                    </div>
                  </li>
                  <li>
                    <div class="net">
                      <input type="checkbox" name='network' id="net3">
                      <label for="net3" class="point _25">BTHub3-ZWCW</label>
                    </div>
                  </li>
                  <li>
                    <div class="net">
                      <input type="checkbox" name='network' id="net4">
                      <label for="net4" class="point _50">BTHub3-ZWCW</label>
                    </div>
                  </li>
                  <li>
                      <div class="net">
                        <input type="checkbox" name='network' id="net4">
                        <label for="net4" class="point _75">BTHub3-ZWCW</label>
                      </div>
                    </li>

                  <li class="add">
                    <a href="#ni">Add Wi-Fi Network</a>
                  </li>
              </ul>

              <ul class="l_form">
                <li>
                  <h4>Network</h4>
                  <span data-bind="text: config.ssid">BTHub3-ZWCW</span>
                </li>
                <li>
                    <h4>Network</h4>
                    <input type="text" autocapitalize="none" data-bind="textInput: config.ssid">
                </li>
                <li>
                    <h4>Passkey</h4>
                    <input type="text" autocapitalize="none" data-bind="textInput: config.pass">
                </li>
                <li>
                    <button data-bind="click: wifi.saveNetwork, text: (wifi.saveNetworkFetching() ? 'Saving' : (wifi.saveNetworkSuccess() ? 'Saved' : 'Connect')), disable: wifi.saveNetworkFetching">Connect</button>
                    <button class="second">Cancel</button>

                </li>
              </ul>
            </div>

            <div class="message scan"data-bind="visible: 0 == scan.results().length">
                  <p>Scanning...</p>
            </div>

            <!-- <table>
              <tbody >
                <tr>
                  <td>

                  <td data-bind="text: ssid"></td>
                  <td data-bind="text: rssi"></td>
                </tr>
              </tbody>
              <tfoot data-bind="visible: 0 == scan.results().length">
                <tr>
                  <td colspan="3">Scanning...</td>
                </tr>
              </tfoot>
            </table> -->

          </div>

          <div  class="message" data-bind="visible: wifi.wifiConnecting">
            <p>Connecting to WIFI Network...</p>
          </div>
        </article>

        <article class="ar_admin">
          <h2>Administration</h2>
          <ul>
            <li>
              <h4>Username</h4>
              <input type="text" autocapitalize="none" data-bind="textInput: config.www_username" pattern=".{15}" title="The field requires 15 characters" maxlength="15" required="">
              <span class="validMessage">15 characters max</span>
            </li>
            <li>
              <h4>Password</h4>
              <input type="text" autocapitalize="none" data-bind="textInput: config.www_password" pattern=".{15}" title="The field requires 15 characters" maxlength="15" required="" >
              <span class="small-text validMessage">15 characters max</span>
              <span class="small-text">Web interface HTTP authentication.</span>
            </li>
            <li><button data-bind="click: saveAdmin, text: (saveAdminFetching() ? 'Saving' : (saveAdminSuccess() ? 'Saved' : 'Save')), disable: saveAdminFetching">Save</button></li>
          </ul>
        </article>

        <article>
          <h2>WiFi Firmware</h2>
          <h3 class="lite">ESP8266</h3>
          <h4>Version <span data-bind="text: config.version">99999</span></h4>
          <!--- input file -->
          <iframe style="width:380px; height:50px;" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" data-bind="attr: {src: upgradeUrl}">
          </iframe>
          <div class="buttonholder">
            <button data-bind="click: restart, text: (restartFetching() ? 'Restarting...' : 'Restart'), disable: restartFetching">Restart</button>
            <button data-bind="click: factoryReset, text: (factoryResetFetching() ? 'Resetting...' : 'Factory Reset'), disable: factoryResetFetching">Factory Reset</button>
          </div>
        </article>

        <div class="advance">
          <input type="checkbox" name="dev_mode" id="mydev_mode" data-bind="checked: developerMode">
          <label for="mydev_mode">Developer Mode</label>
        </div>

        <article data-bind="visible: developerMode" class="ar_raspi">
          <h2>RAPI Command</h2>
          <div class="terminal">
            <h3>Terminal</h3>
            <form method='get' action='r' data-bind="with: rapi">
              <input type="text" autocapitalize="none" name='rapi' length='32' data-bind="textInput: cmd" />
              <button data-bind="click: send, disable: rapiSend">Send</button>
              <p data-bind="text: ret" class="code"></p>
            </form>
          </div>
          <div class="commands">
              <div>
                <h3>Functions</h3>
                <ul class="l_data_com">
                  <li>
                    <span>$FB</span>
                    <span>LCD Backlight Color (0-7)</span>
                  </li>
                  <li>
                    <span>$FD</span>
                    <span>Disable EVSE</span>
                  </li>
                  <li>
                    <span>$FE</span>
                    <span>Enable EVSE</span>
                  </li>
                  <li>
                    <span>$FP</span>
                    <span>Output text at x y position text to LCD (x y text)</span>
                  </li>
                  <li>
                    <span>$FR</span>
                    <span>Reset EVSE</span>
                  </li>
                  <li>
                    <span>$FS</span>
                    <span>Put EVSE to sleep</span>
                  </li>
                </ul>
              </div>
              <div>
                <h3>Get</h3>
                <ul class="l_data_com">
                  <li>
                    <span>$G3</span>
                    <span>Get Charge Time Limit, 15-minutes (1), 30-minutes (2), etc...</span>
                  </li>
                  <li>
                    <span>$GA</span>
                    <span>Get Ammeter Scale/Offset, scale offset</span>
                  </li>
                  <li>
                    <span>$GC</span>
                    <span>Get current capacity range, integers</span>
                  </li>
                  <li>
                    <span>$GE</span>
                    <span>Get settings, amps flags</span>
                  </li>
                  <li>
                    <span>$GF</span>
                    <span>Get fault counters, gfi ground stuck (in hex)</span>
                  </li>
                  <li>
                    <span>$GG</span>
                    <span>Get charge current and voltage, milliamps millivolts</span>
                  </li>
                  <li>
                    <span>$GH</span>
                    <span>Get charge limit in kWh, integer</span>
                  </li>
                  <li>
                    <span>$GM</span>
                    <span>Get Voltmeter Scale/Offset, scale offset</span>
                  </li>
                  <li>
                    <span>$GO</span>
                    <span>Get Overtemperature thresholds, ambient infrared</span>
                  </li>
                  <li>
                    <span>$GP</span>
                    <span>Get Temperatures, LCD mcp9808 infrared (all integers, Celsius * 10)</span>
                  </li>
                  <li>
                    <span>$GS</span>
                    <span>Get EVSE State, state elapsed_seconds</span>
                  </li>
                  <li>
                    <span>$GT</span>
                    <span>Get time, year month day hour minute second</span>
                  </li>
                  <li>
                    <span>$GU</span>
                    <span>Get Energy usage, wattseconds watt_hour_accumulated</span>
                  </li>
                  <li>
                    <span>$GV</span>
                    <span>Get Versions, evse_firmware protocol_version</span>
                  </li>
                </ul>
              </div>
              <div>
                <h3>Set</h3>
                <ul class="l_data_com">
                  <li>
                    <span>$S0</span>
                    <span>Set LCD Type, Monochrome (0), Color (1)</span>
                  </li>
                  <li>
                    <span>$S1</span>
                    <span>Set RTC Year Month Day Hour Minute Second (all 2-digit max)</span>
                  </li>
                  <li>
                    <span>$S2</span>
                    <span>Enable (1)/ Disable (0) Ammeter Calibration Mode</span>
                  </li>
                  <li>
                    <span>$S3</span>
                    <span>Set Charge Time Limit, 15-minutes (1), 30-minutes (2), etc...</span>
                  </li>
                  <li>
                    <span>$SA</span>
                    <span>Set Ammeter Scale/Offset, scale offset</span>
                  </li>
                  <li>
                    <span>$SC</span>
                    <span>Set current capacity, integer</span>
                  </li>
                  <li><span>$SD</span><span>Enable (1) / Disable (0) Diode self-check</span></li>
                  <li>
                    <span>$SF</span>
                    <span>Enable (1) / Disable (0) GFI self-check</span>
                  </li>
                  <li>
                    <span>$SG</span>
                    <span>Enable (1) / Disable (0) Ground check</span>
                  </li>
                  <li>
                    <span>$SH</span>
                    <span>Set charge limit in kWh, integer</span>
                  </li>
                  <li>
                    <span>$SK</span>
                    <span>Set accumulated Wh, integer</span>
                  </li>
                  <li><span>$SL</span><span>Set service level (1/2/A)</span></li>
                  <li>
                    <span>$SM</span>
                    <span>Set Voltmeter Scale/Offset, scale offset</span>
                  </li>
                  <li>
                    <span>$SO</span>
                    <span>Set Overtemperature thresholds, ambient infrared</span>
                  </li>
                  <li>
                    <span>$SR</span>
                    <span>Enable (1) / Disable (0) Stuck-relay check</span>
                  </li>
                  <li>
                    <span>$SS</span>
                    <span>Enable (1) / Disable (0) GFI self-check</span>
                  </li>
                  <li>
                    <span>$ST</span>
                    <span>Set timer, start_hour start_min end_hour end_min</span>
                  </li>
                  <li>
                    <span>$SV</span>
                    <span>Enable (1) / Disable (0) vent required check</span>
                  </li>
                </ul>
              </div>
          </div>
        </article>

    </section>
      <!--end TAB 2-->
      <!--TAB 3: Services -->
    <section id="content-3" data-bind="visible: isServices">
        <article class="ar_mq">
            <div class="t_switch">
                <h2 data-bind="click: toggle.bind($data, showMqttInfo)" class="info">MQTT</h2>
                <div class="switch_c">
                    <div class="switch">
                        <input type="checkbox" name="mqtt_enabled" id="mqtt_enabled"  data-bind="checked: config.mqtt_enabled">
                        <label for="mqtt_enabled"></label>
                    </div>
                </div>
            </div>

            <!-- <p>
              <input type="checkbox" id="mqtt_enabled" data-bind="checked: config.mqtt_enabled" />
              <label for="mqtt_enabled"><b>Enable MQTT</b></label>
              <span class="info" data-bind="click: toggle.bind($data, showMqttInfo)"></span>
            </p> -->

            <div class="message" data-bind="visible: showMqttInfo">
              <h4>Status published to</h4>
              <p>{base-topic}/{status} value</p>
              <span>e.g. <em data-bind="text: '' !== config.mqtt_topic() ? config.mqtt_topic() : 'openevse'"></em>/amp 16</span>

              <h4>RAPI control subscribes to</h4>
              <p>{base-topic}/rapi/in/{command} value</p>
              <span>e.g. <em data-bind="text: '' !== config.mqtt_topic() ? config.mqtt_topic() : 'openevse'"></em>/rapi/in/$SC 16</span>
              <span>e.g. <em data-bind="text: '' !== config.mqtt_topic() ? config.mqtt_topic() : 'openevse'"></em>/rapi/in/$GC</span>

              <h4>RAPI response published to</h4>
              <p>{base-topic}/rapi/out response</p>
              <span>e.g. <em data-bind="text: '' !== config.mqtt_topic() ? config.mqtt_topic() : 'openevse'"></em>/rapi/out $OK 6 32</span>
            </div>

            <ul class="l_form mq_s" data-bind="visible: config.mqtt_enabled">
              <li>
                <h4>Host</h4>
                <input data-bind="textInput: config.mqtt_server" type="text" autocapitalize="none" required>
                <span>e.g 'emonpi', 'test.mosquitto.org', '192.168.1.4'</span>
              </li>
              <li>
                <h4>Username <span>blank - no authentication</span></h4>
                <input data-bind="textInput: config.mqtt_user" type="text" autocapitalize="none">
              </li>
              <li>
                  <h4>Password <span>blank - no authentication</span></h4>
                  <input data-bind="textInput: config.mqtt_pass" type="password" autocapitalize="none">
              </li>
              <li>
                  <h4>Base-topic*:</h4>
                  <input data-bind="textInput: config.mqtt_topic" type="text" autocapitalize="none"><br/>
                  <span>e.g 'openevse'</span>
              </li>
            </ul>

            <div class="solar" data-bind="visible: config.mqtt_enabled">
              <h3 class="info" data-bind="click: toggle.bind($data, showSolarDivert)">Solar PV divert</h3>
              <div class="message" data-bind="visible: showSolarDivert() &amp;&amp; config.mqtt_enabled()">
                  <p>Dynamically adjust charge rate based on solar PV generation or excess power (grid export).</p>
                  <h4>1. Normal (default):</h4>
                    <ul>
                      <li><span class="small-text">Charge at maximum current set by EVSE.</span></li>
                    </ul>
                    <h4>2. Eco:</h4>
                    <ul>
                      <li><span class="small-text">If only solar PV feed available: charge rate is modulated based on <b>solar PV generation.</b></span></li>
                      <li><span class="small-text">If grid +I/-E (positive Import / negative Export) feed is available: charge rate will be modulated by available  <b>excess power.</b></span></li>
                      <li><span class="small-text">If EVSE is sleeping: charging will begin when solar PV / excess power > min charge rate.</span></li>
                      <li><span class="small-text">Charging will not pause; this avoids excess wear on the EVSE relay and the EV.</span></li>
                    </ul>
                    <span><strong>Note: It's assumed that EVSE power is included in the grid feed.</strong></span>

                </div>
                <ul class="l_form">
                  <li>
                    <h4>SolarPV-gen topic</h4>
                    <input data-bind="textInput: config.mqtt_solar, enable: '' === config.mqtt_grid_ie()" type="text" autocapitalize="none" hint="emon/emonpi/power2"><br>
                    <span>Solar PV MQTT topic to modulate charge rate based on solar</span>
                  </li>
                  <li>
                      <b>Grid (+I/-E) topic:</b><br>
                      <input data-bind="textInput: config.mqtt_grid_ie, enable: '' === config.mqtt_solar()" type="text" autocapitalize="none" hint="emon/emonpi/power1"><br>
                      <span class="small-text">Grid (+I/-E) MQTT topic to modulate charge rate based on <b>excess power</b></span>
                  </li>
                </ul>
            </div>

            <div class="connect" data-bind="visible: config.mqtt_enabled">

              <h4 data-bind="text: 1 ===  status.mqtt_connected() ? 'Connected' : 'Disconnected'"></h4>
              <span class="socket" data-bind="css: 1 === status.mqtt_connected() ? 'y' : 'n'"></span>
            </div>
            <div class="buttonholder" data-bind="visible: config.mqtt_enabled">
                <button data-bind="click: saveMqtt, text: (saveMqttFetching() ? 'Saving' : (saveMqttSuccess() ? 'Saved' : 'Save')), disable: saveMqttFetching">Save</button>
            </div>

        </article>

        <article class="ar_emoncms">
          <div class="t_switch">
              <h2><img src="emoncms.png" data-src="emoncms.png"></h2>
              <div class="switch_c">
                  <div class="switch">
                      <input type="checkbox" name="emoncms_enabled" id="emoncms_enabled"  data-bind="checked: config.emoncms_enabled">
                      <label for="emoncms_enabled"></label>
                  </div>
              </div>
          </div>
          <!-- <p>
            <input type="checkbox" id="emoncms_enabled" data-bind="checked: config.emoncms_enabled" />
            <label for="emoncms_enabled"><b>Enable Emoncms</b></label>
          </p> -->

          <ul  class="l_form" data-bind="visible: config.emoncms_enabled">
            <li>
                <h4>Emoncms Server:</h4>
                <input type="text" autocapitalize="none" data-bind="textInput: config.emoncms_server" required><br/>
                <span>e.g:
                  <a href="http://data.openevse.com/emoncms">data.openevse.com/emoncms</a>,
                  <a href="https://emoncms.org">emoncms.org</a>,
                  <a href="http://emonpi/emoncms">emonpi/emoncms</a>
                </span>
            </li>
            <li>
                <h4>Emoncms Node:</h4>
                <input type="text" autocapitalize="none" data-bind="textInput: config.emoncms_node" required>
            </li>
            <li>
                <h4>Emoncms write-apikey:</h4>
                <input type="password" autocapitalize="none" data-bind="textInput: config.emoncms_apikey">
            </li>
            <li>
                <h4>Emoncms SSL SHA-1 Fingerprint (optional):</h4>
                <input type="text" autocapitalize="none" data-bind="textInput: config.emoncms_fingerprint">
                <span>HTTPS will be enabled if present e.g: <br/> 7D:82:15:BE:D7:BC:72:58:87:7D:8E:40:D4:80:BA:1A:9F:8B:8D:DA</span>
            </li>
          </ul>
          <ul class="l_data" data-bind="visible: config.emoncms_enabled">
            <li>
                <span class="socket" data-bind="css: 1 === status.emoncms_connected() ? 'y' : 'n'"></span>
                <span data-bind="text: 1 === status.emoncms_connected() ? 'Connected' : 'Disconnected'"></span>
            </li>
            <li data-bind="visible: config.emoncms_enabled() &amp;&amp; 1 === status.emoncms_connected()">
                <span  data-bind="text: status.packets_success"></span>
                <span>Successful posts</span>
            </li>
          </ul>
            <ul class="l_form" data-bind="visible: config.emoncms_enabled">
            <li class="buttonholder">
                <button data-bind="click: saveEmonCms, text: (saveEmonCmsFetching() ? 'Saving' : (saveEmonCmsSuccess() ? 'Saved' : 'Save')), disable: saveEmonCmsFetching">Save</button>
            </li>

          </ul>
        </article>

        <article class="ar_ohm">
          <div class="t_switch">
              <h2 data-bind="click: toggle.bind($data, showOhm)" class="info withimg"><img src="ohm.png" data-src="ohm.png"/></h2>

              <div class="switch_c">
                  <div class="switch">
                      <input type="checkbox" name="ohm_enabled" id="ohm_enabled"  data-bind="checked: config.ohm_enabled">
                      <label for="ohm_enabled"></label>
                  </div>
              </div>
          </div>

          <div class="message" data-bind="visible: showOhm()">
              <p>
                <a href="https://www.ohmconnect.com/" target="_blank" rel="nofollow"> OhmConnect</a> monitors real-time conditions on the electricity grid. When dirty and unsustainable power plants turn
                  on, our users receive a notification to save energy.
              </p>
          </div>
          <div class="message warning" data-bind="visible: !config.ohm_enabled()">
              <h4>USA - California only</h4>
          </div>

          <ul class="l_form" data-bind="visible: config.ohm_enabled">
              <li class="link"> <a href="https://ohm.co/openevse" class="button" rel="nofollow" target="_blank">Click Here to Join</a></li>
              <li>
                  <h4>Ohm key:</h4>
                  <input data-bind="textInput: config.ohmkey" type="text" autocapitalize="none">
                  <span>Ohm Key can be obtained by logging in to OhmConnect, enter Settings and locate the link in "Open Source Projects"
                    Example: https://login.ohmconnect.com/verify-ohm-hour/OpnEoVse
                    <strong>Key: </strong>OpnEoVse</span>
              </li>
          </ul>

          <!-- <p>
            <input type="checkbox" id="ohm_enabled" data-bind="checked: config.ohm_enabled" />
            <label for="ohm_enabled"><b>Enable OhmConnect</b></label>
            <a href="https://ohm.co/openevse" rel="nofollow">Click Here to Join</a>
          </p> -->

          <ul class="l_data" data-bind="visible: config.ohm_enabled">
            <li>
              <span data-bind="text: status.ohm_hour"></span>
              <span>Hour</span>
            </li>
          </ul>
          <ul class="l_form" data-bind="visible: config.ohm_enabled">
            <li class="buttonholder">
                <button data-bind="click: saveOhmKey, text: (saveOhmKeyFetching() ? 'Saving' : (saveOhmKeySuccess() ? 'Saved' : 'Save')), disable: saveOhmKeyFetching">Save</button>
            </li>
          </ul>
        </article>
    </section>
    <!--end tab 3-->

  </div>
  <footer>
    <p>Powered by <a href="http://www.openevse.com">OpenEVSE</a> and <a href="https://openenergymonitor.org">OpenEnergyMonitor</a></b>
    <p><strong>Version:</strong>V <span data-bind="text: config.version"></span></p>
  </footer>

  <!--end page -->
  <script src="lib.js"></script>
  <script src="home.js"></script>
</body>

</html>
